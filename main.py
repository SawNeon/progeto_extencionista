from translate import Translator
import pyttsx3
import speech_recognition as sr
from colorama import init, Fore

init(autoreset=True)

class ProfessorTradutor:
    def __init__(self):
        self.robo = pyttsx3.init()
        self.robo.setProperty('voice', self.robo.getProperty('voices')[1].id)
        self.reconhecedor = sr.Recognizer()

    def carregar_professor_art(self):
        return """‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°Ü‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚°ø‚†É‚£∏‚£ø‚£ø‚†ø‚†ø‚†ü‚†õ‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚†Ä‚£Ä‚£†‚£§‚£à‚£†‚£§‚£†‚£§‚£§‚°¥‚†∂‚†∂‚†õ‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚£æ‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚¢†‚£§‚£§‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚†á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚†Ä‚£à‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚£â‚†â‚†Ä
‚†Ä‚£ø‚°á‚¢∏‚£ø‚†ü‚£ø‚°è‚†Ä‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚£ø‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£∑‚£Ü‚†Ä‚†Ä‚†Ä‚£∞‚£æ‚£∂‚°Ä‚†Ä‚†Ä‚¢Ä‚£∂‚£ø‚£Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚£ø‚°á‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†ã‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚£ø‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£¶‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚†Ä‚†õ‚†É‚†Ä‚†Ä‚†ö‚†õ‚†õ‚†õ‚†ì‚†Ä‚†ê‚†õ‚†õ‚†õ‚†õ‚†Ç‚†Ä‚†ö‚†õ‚†õ‚†õ‚†ì‚†Ä‚†Ä"""

    def falar(self, texto):
        self.robo.say(texto)
        print(Fore.CYAN + f"üì¢ Professor: {texto}")
        self.robo.runAndWait()

    def ouvir_comando(self):
        escolha = input(Fore.YELLOW + "Escolha uma op√ß√£o (1 - Digitar / 2 - Falar): ")
        if escolha == "1":
            return input(Fore.CYAN + "Digite a frase: ")
        elif escolha == "2":
            with sr.Microphone() as source:
                try:
                    print(Fore.CYAN + "üé§ Diga algo...")
                    print(Fore.YELLOW + "Comece a falar agora.")
                    self.reconhecedor.adjust_for_ambient_noise(source)
                    audio = self.reconhecedor.listen(source, timeout=10)
                    texto = self.reconhecedor.recognize_google(audio, language="pt-BR")
                    print(Fore.GREEN + f"üëÇ Voc√™ disse: {texto}")
                    return texto
                except sr.UnknownValueError:
                    print(Fore.RED + "‚ùå N√£o foi poss√≠vel entender o √°udio. Digite a frase.")
                    return input(Fore.CYAN + "Digite a frase: ")
                except sr.RequestError as e:
                    print(Fore.RED + f"‚ùå Erro ao chamar Google API: {e}")
                    return ""
                except sr.WaitTimeoutError:
                    print(Fore.RED + "‚ùå Tempo expirado. Tente novamente.")
                    return ""

def traduzir_e_falar():
    professor = ProfessorTradutor()
    professor.falar(professor.carregar_professor_art())

    # Adicionando a lista de idiomas suportados
    idiomas = ['pt-br', 'en-us', 'de', 'es', 'fr', 'it', 'ja', 'ko', 'nl', 'pl',
               'ru', 'sv', 'tr', 'zh-cn', 'zh-tw', 'ar', 'bg', 'cs', 'da',
               'el', 'et', 'fi', 'hu', 'id', 'ms', 'no', 'ro', 'sr', 'sk',
               'sl']

    print('Lista de idiomas suportados:')
    print('-=' * 30)
    for i, idioma in enumerate(idiomas, start=1):
        print(f"{i}-{idioma.capitalize()}", end='    ' if i % 5 != 0 else '\n')
    print('\n' + '-=' * 30)

    idioma_origem = idiomas[int(input('Digite o n√∫mero do idioma que voc√™ deseja traduzir: ')) - 1]
    idioma_destino = idiomas[int(input('Digite o n√∫mero do idioma que voc√™ quer: ')) - 1]

    tradutor = Translator(from_lang=idioma_origem, to_lang=idioma_destino)

    professor.falar("Agora, me diga o que voc√™ quer traduzir.")
    frase = professor.ouvir_comando()

    if frase:
        frase_traduzida = tradutor.translate(frase)
        professor.falar(f"Frase Original: {frase}")
        professor.falar(f"Frase Traduzida: {frase_traduzida}")

if __name__ == "__main__":
    traduzir_e_falar()
